// sqf
//
// SQF-Calculator settings file
//

//
// The maximum time allowed for execution of the expression
// For example, the total time for output full game config may be 20 seconds and more.
// At the latest patches ArmA2, well, sooo much time: ((
//

_maxTimeout = 20; //120;

//
// Codes keyboard shortcuts, with clamped alt
//

//  _HKOpenConsole = 0x3B; // F1 key
//  _HKOpenConsole = 0x3C; // F2 key
//  _HKOpenConsole = 0x29; // tilda key
//  _HKOpenConsole = 0x52; // grey 0
//  _HKInput = 2;
//  _HKDisplay = 3;
//  _HKDisplay2 = 4;
//  _HKHistory = 0x23;
//  _HKProcesses = 0x24
//  _HKDemo = 0x20;
//  _HKHelp = 0x3B;
//  _HKLeft =
//  _HKRight =

//
// Casual shortcut
//

cfg  = configFile;
cfga = configFile >> "CfgAmmo";
cfgm = configFile >> "CfgMagazines";
cfgw = configFile >> "CfgWeapons";
cfgv = configFile >> "CfgVehicles";
mcfg = missionConfigFile;
ccfg = campaignConfigFile;

//
// Additional history lines, any usefull code strings
//

_myHistory = [
    
    {"Show all weapons, magazines and pathes that uses turrets of vehicle under cursor"; cursorTarget call SQFCALC_GetTurretsWeapons},
    {"Show all weapons, magazines and pathes that uses turrets of vehicle class"; "RHIB2Turret" call SQFCALC_GetTurretsWeapons},
    
    // PRESS INSERT AND BEFORE CTRL+ENTER, OR CLICK BUTTON WATCH
    {"Watcher CursorTarget"; call SQFCALC_CursorTargetWatcher},
    {"Config of cursor target"; configFile >> "CfgVehicles" >> typeof cursorTarget},
    {"Show all game weapons";         
        [configFile >> "CfgWeapons", {
            if (isClass _x) then {
                if (getNumber (_x >> "scope") > 0) then {
                    configName _x
                }
            }
        }] call SQFCALC_MapGrep
    },
    {"Show all game cars";
        [configFile >> "CfgVehicles", {
            if (isClass _x) then {
                if (getNumber (_x >> "scope") > 0 &&
                    getText (_x >> "simulation") == "car"
                ) then {
                    configName _x
                }
            }
        }] call SQFCALC_MapGrep
    },
    {"Show all modules";
        [configFile >> "CfgVehicles", {
            if (isClass _x) then {
                if (getNumber (_x >> "scope") > 0 &&
                    getText (_x >> "vehicleClass") == "Modules"
                ) then {
                    configName _x
                }
            }
        }] call SQFCALC_MapGrep
    },
    {"Show all fonts"; [configFile >> "CfgFontFamilies", {if (isClass _x) then { configName _x }}] call SQFCALC_MapGrep},
    {"Show animation sources of vehicle player"; configFile >> "cfgVehicles" >> typeof vehicle player >> "AnimationSources"},
    {"Show animation sources of cursorTarget"; configFile >> "cfgVehicles" >> typeof cursorTarget >> "AnimationSources"},
    {"Show nearest objects"; 
        _list = []; 
        {
            _list set [count _list, [str _x, if (isClass(configFile >> "CfgVehicles" >> typeof _x)) then {
                getText(configFile >> "CfgVehicles" >> typeof _x >> "model") 
            } else {
                str _x call SQFCALC_GetModelName 
            }, typeof _x]] 
        } foreach nearestObjects [player, [], 20];
        _list
    },
    {"Show crew roles"; cursorTarget call SQFCALC_GetCrewRoles},
    {"Show primary weapon player config"; configFile >> "CfgWeapons" >> primaryWeapon player},
    {"Show secondary weapon player config"; configFile >> "CfgWeapons" >> secondaryWeapon player},
    {"Find all current display"; [1000, 1000] call SQFCALC_FindAllDisplay},
    {"Add teleport player group"; onMapSingleClick {{ _x setpos _pos } foreach units player; true}},
    {"env1" call compile preprocessFileLineNumbers "\userconfig\sqf-calculator\envs\set.sqf"},
    {[configFile >> "CfgVehicles"] call compile preprocessFileLineNumbers "\userconfig\sqf-calculator\dumpConfig.sqf"},
    
    // SNIPPETS

    {"" call SQFCALC_findClassInConfig},
    {cursorTarget setObjectTexture [0, "tex\"]},
    {_obj = "" createVehicleLocal (screenToWorld [.5,.5]); _obj setObjectTexture [0, ""]; player reveal _obj},
    {configFile >> "cfgVehicles" >> typeof cursorTarget >> "HitPoints"},
    {cursorTarget setHit [getText (configFile >> "cfgVehicles" >> typeof cursorTarget >> "HitPoints" >> "HitVRotor" >> "name"), 1]},
    {[cfg >> ""] call compile preprocessFileLineNumbers "userconfig\sqf-calculator\dumpConfig.sqf"},
    {call compile preprocessFileLineNumbers ""},
    {findDisplay 46 displayCtrl 1000 ctrlShow false}
];


///////////////////////////////////////////////////

#define arg(i)          (_this select (i))
#define ifExistArg(i)   if (count _this > (i))
#define ifArgType(i,t)  if (ifExistArg(i) then { typeName arg(i) == (t) } else { false })
#define argIfExist(i)   ifExistArg(i) then { arg(i) }
#define argIfType(i,t)  ifArgType(i,t) then { arg(i) }
#define argOr(i,v)      argIfExist(i) else { v }

#define __item(a,v) ((a)select(((v)min(count(a)-1))max 0))
#define __itemr(a,v) (__item((a),if((v)<0)then{count(a)+(v)}else{v}))
#define __push(a,v) (a)set[count(a),(v)]
#define __pushTo(a) call{(a)set[count(a),_this]}
#define __top(a) ((a)select((count(a)-1)max 0))
#define __pop(a) (0 call{_this=__top(a);(a)resize((count(a)-1)max 0);_this})
#define __writeTop(a,v) (a)set[count(a)-1,v]
#define __randomSelect(a) ((a)select floor random count(a))

///////////////////////////////////////////////////

// Helpers
SQFCALC_MapGrep = {
    private ["_SC0PE_", "_x"];
    _SC0PE_ = ["_SC0PE_", "_C0NF_", "_Fi1T3R_", "_1iST_", "_1_"];
    private _SC0PE_;
    _C0NF_ = arg(0);
    _Fi1T3R_ = arg(1);
    _1iST_ = [];
    for "_1_" from 0 to count _C0NF_ -1 do {
        _x = _C0NF_ select _1_;
        _Fi1T3R_ call { private _SC0PE_; _x call _this } call {
            __push(_1iST_, _this);
        };
    };
    _1iST_;
};

SQFCALC_findClassInConfig = {
    private ["_classname", "_traverse", "_result"];
    _classname = _this;
    _result = [];
    _traverse = {
        private "_confName";
        if (isClass _this) exitwith {
            if (configName _this == _classname) then {
                _result set [count _result, [str _this, _this]];
            };
            for "_i" from 0 to count _this - 1 do {
                _this select _i call _traverse
            };
        };
    };
    configFile call _traverse;
    _result;
};

SQFCALC_CursorTargetWatcher = {
    private ["_type", "_conf"];
    if (!isNull cursorTarget) then {
        _type = typeof cursorTarget;
        _conf = configFile >> "CfgVehicles" >> _type;
        SQFCALC_TargetCursorConf = _conf;
        format [
            "%1<br />class %2 : %3<br />%4<br />%5<br />%6<br />%7",
            getText(_conf >> "displayName"),
            _type,
            configName inheritsFrom _conf,
            getText(_conf >> "model"),
            if (getNumber(_conf >> "isMan") == 1) then {
                name cursorTarget
            } else {
                getText(_conf >> "Library" >> "libTextDesc")
            },
            cursorTarget,
            side cursorTarget
        ];
    } else {
        "void";
    }
};

SQFCALC_GetCrewRoles = {
    private "_list";
    _list = [];
    {
        _list set [count _list, [
            name _x,
            rank _x,
            "Assigned as " + (vehicle _x call {
                if (_x == assignedCommander _this) exitwith { "Commander" };
                if (_x == assignedDriver _this) exitwith { "Driver" };
                if (_x == assignedGunner _this) exitwith { "Gunner" };
                if (_x in assignedCargo _this) exitwith { "Cargo" };
                "unknown role"
            }),
            assignedVehicleRole _x
        ]]
    } foreach crew _this;
    _list;
};

// Example:
// cursorTarget call SQFCALC_GetTurretsWeapons
// "M1A2_US_TUSK_MG_EP1" call SQFCALC_GetTurretsWeapons
//
SQFCALC_GetTurretsWeapons = {
    private ["_result", "_getAnyMagazines", "_findRecurse", "_class"];
    _result = [];
    _getAnyMagazines = {
        private ["_weapon", "_mags"];
        _weapon = configFile >> "CfgWeapons" >> _this;
        _mags = [];
        {
            _mags = _mags + getArray (
                (if (_x == "this") then { _weapon } else { _weapon >> _x }) >> "magazines"
            )
        } foreach getArray (_weapon >> "muzzles");
        _mags
    };
    _findRecurse = {
        private ["_root", "_class", "_path", "_currentPath"];
        _root = arg(0);
        _path = +arg(1);
        for "_i" from 0 to count _root -1 do {
            _class = _root select _i;
            if (isClass _class) then {
                _currentPath = _path + [_i];
                {
                    _result set [count _result, [_x, _x call _getAnyMagazines, _currentPath, str _class]];
                } foreach getArray (_class >> "weapons");
                _class = _class >> "turrets";
                if (isClass _class) then {
                    [_class, _currentPath] call _findRecurse;
                };
            };
        };
    };
    _class = (
        configFile >> "CfgVehicles" >> (
            switch (typeName _this) do {
                case "STRING" : {_this};
                case "OBJECT" : {typeOf _this};
                default {nil}
            }
        ) >> "turrets"
    );
    [_class, []] call _findRecurse;
    _result;
};

SQFCALC_GetVehicleTurrets = {
    private ["_findRecurse", "_result", "_class"];
    _findRecurse = {
        private ["_root", "_class", "_path", "_currentPath"];
        _root = arg(0);
        _path = +arg(1);
        for "_i" from 0 to count _root -1 do {
            _class = _root select _i;
            if (isClass _class) then {
                _currentPath = _path + [_i];
                _result set [count _result, _currentPath];
                _class = _class >> "turrets";
                if (isClass _class) then {
                    [_class, _currentPath] call _findRecurse;
                };
            };
        };
    };
    _result = [];
    [configFile >> "CfgVehicles" >> _this >> "turrets", []] call _findRecurse;
    _result;
};

SQFCALC_GetVehicleWeapons = {
    private ["_weapons", "_mainTurret", "_turret"];
    _weapons = [];
    _mainTurret = configFile >> "CfgVehicles" >> _this;
    {
        _turret = _mainTurret;
        {
            _turret = (_turret >> "turrets") select _x;
        } foreach _x;
        _weapons = _weapons + getArray (_turret >> "weapons");
    } foreach (_this call SQFCALC_GetVehicleTurrets);
    _weapons;
};

//
// Example:
// [typeOf cursorTarget, "M240_veh_2"] call SQFCALC_GetTurretPath
// ["M1A2_US_TUSK_MG_EP1", "M240_veh_2"] call SQFCALC_GetTurretPath
//

SQFCALC_GetTurretPath = {
    private ["_result", "_getAnyMagazines", "_findRecurse", "_class"];
    _findRecurse = {
        private ["_root", "_class", "_path", "_currentPath"];
        _root = arg(0);
        _path = +arg(1);
        for "_i" from 0 to count _root -1 do {
            _class = _root select _i;
            if (isClass _class) then {
                _currentPath = _path + [_i];
                if (_weaponClass in getArray (_class >> "weapons")) then {
                    throw _currentPath;
                };
                _class = _class >> "turrets";
                if (isClass _class) then {
                    [_class, _currentPath] call _findRecurse;
                };
            };
        };
    };
    _vehicleClass = arg(0);
    _weaponClass = arg(1);
    try {
        [configFile >> "CfgVehicles" >> _vehicleClass >> "turrets", []] call _findRecurse;
        [];
    } catch {
        _exception
    };
};

SQFCALC_GetModelName = {
    _this = toArray _this;
    _i = _this find 32;
    if (_i < 0) exitwith { "" };
    _this set [_i, 62];
    str parseText ("< " + toString _this);
};

//
// ["wall_indfnc_3.p3d", getpos player, 4] call SQFCALC_GetNearObjectByModelName
//

SQFCALC_GetNearObjectByModelName = {
    private ["_modelname", "_position", "_radius"];
    _modelname = arg(0);
    _position = arg(1);
    _radius = arg(2);
    [nearestObjects [_position, [], _radius], { 
        if ((toLower (str _x call SQFCALC_GetModelName)) in _modelname) then { _x };
    }] call SQFCALC_MapGrep;
};

SQFCALC_FindAllDisplay = {
    private [
        "_ctrlTypes", "_getCtrlId", "_n", "_m", "_displayList", "_displayMap", 
        "_display", "_idd", "_matchedDisplays", "_ctrlList", "_ctrl"
    ];
    _ctrlTypes = [
        "CT_STATIC",             0x00,
        "CT_BUTTON",             0x01,
        "CT_EDIT",               0x02,
        "CT_SLIDER",             0x03,
        "CT_COMBO",              0x04,
        "CT_LISTBOX",            0x05,
        "CT_TOOLBOX",            0x06,
        "CT_CHECKBOXES",         0x07,
        "CT_PROGRESS",           0x08,
        "CT_HTML",               0x09,
        "CT_STATIC_SKEW",        0x0A,
        "CT_ACTIVETEXT",         0x0B,
        "CT_TREE",               0x0C,
        "CT_STRUCTURED_TEXT",    0x0D,
        "CT_CONTEXT_MENU",       0x0E,
        "CT_CONTROLS_GROUP",     0x0F,
        "CT_SHORTCUT_BUTTON",    0x10, 
        "CT_XKEYDESC",           0x28,
        "CT_XBUTTON",            0x29,
        "CT_XLISTBOX",           0x2A,
        "CT_XSLIDER",            0x2B,
        "CT_XCOMBO",             0x2C,
        "CT_ANIMATED_TEXTURE",   0x2D,
        "CT_OBJECT",             0x50,
        "CT_OBJECT_ZOOM",        0x51,
        "CT_OBJECT_CONTAINER",   0x52,
        "CT_OBJECT_CONT_ANIM",   0x53,
        "CT_LINEBREAK",          0x62,
        "CT_USER",               0x63,
        "CT_MAP",                0x64,
        "CT_MAP_MAIN",           0x65,
        "CT_LIST_N_BOX",         0x66
    ] call {
        private "_list";
        _list = [];
        for "_i" from 0 to count _this -1 step 2 do {
            _list set [_this select (_i+1), _this select _i]
        };
        _list;
    };

    _n = argOr(0, 1000);
    _m = argOr(1, 1000);
    
    _displayList = [];

    for "_i" from 0 to _n do {
        
        _display = findDisplay _i;
        if (! isNull _display) then {
            _ctrlList = [];
            _matchedDisplays = [];
            _displayList set [count _displayList, [_display, _ctrlList]];
            for "_i" from 0 to _m do {
                _ctrl = _display displayCtrl _i;
                if (! isNull _ctrl) then {
                    _ctrlList set [
                        count _ctrlList,
                        parseText format ['%1, %2, %3, "%4"',
                            _ctrl, ["hidden", "shown"] select ctrlShown _ctrl, 
                            __item(_ctrlTypes, ctrlType _ctrl), ctrlText _ctrl
                        ]
                    ];
                };
            };
        };
    };
    _displayList;
};

