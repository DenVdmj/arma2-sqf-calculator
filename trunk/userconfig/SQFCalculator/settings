// sqf
//
// Sqf-calculator settings file
//

//
// Additional history lines, any usefull code strings
//

_myHistory = [
    // Show all weapons and magazines that uses turrets of vehicle under cursor
    {"Show turrets weapons"; cursorTarget call SQFCALC_GetTurretsWeapons},
    // Press Insert and before Ctrl+Enter, or click button Watch
    {"Watcher CursorTarget"; call SQFCALC_CursorTargetWatcher},
    {"Config of cursor target"; configFile >> "CfgVehicles" >> typeof cursorTarget},
    {"Show all game weapons"; _a = []; _c = configFile >> "CfgWeapons"; for "_i" from 0 to count _c -1 do { _x = _c select _i; if( isClass _x ) then { if( getNumber (_x >> "scope") > 0 ) then { _a set [count _a, configName _x] } }; }; _a},
    {"Show all game cars"; _a = []; _c = configFile >> "CfgVehicles"; for "_i" from 0 to count _c -1 do {_x = _c select _i; if( isClass _x ) then { if( getText (_x >> "simulation") == "car" && getNumber (_x >> "scope") > 0 ) then { _a set [count _a, configName _x] } }; }; _a},
    {"Show animation sources of vehicle player"; configFile >> "cfgVehicles" >> typeof vehicle player >> "AnimationSources"},
    {"Show animation sources of cursorTarget"; configFile >> "cfgVehicles" >> typeof cursorTarget >> "AnimationSources"},
    // {"Show nearest objects"; _c = []; { _c set [count _c, [_x, typeof _x]] } foreach nearestObjects [player, [], 20]; _c},
    {"Show nearest objects"; _c = []; { _c set [count _c, [str _x, if(isClass(configFile >> "CfgVehicles" >> typeof _x)) then { getText(configFile >> "CfgVehicles" >> typeof _x >> "model") } else { str _x call SQFCALC_GetModelName }, typeof _x]] } foreach nearestObjects [player, [], 20]; _c},
    {"Show crew roles"; cursorTarget call SQFCALC_GetCrewRoles},
    {"Show primary weapon player config"; configFile >> "CfgWeapons" >> primaryWeapon player},
    {"Show secondary weapon player config"; configFile >> "CfgWeapons" >> secondaryWeapon player},
    {"Find all current display"; [1000, 1000] call SQFCALC_FindAllDisplay},
    {"Add teleport player group"; onMapSingleClick {{ _x setpos _pos } foreach units player; true}},
    {"env1" call compile preprocessFileLineNumbers "\userconfig\SQFCalculator\envs\set.sqf"},
    {[configFile >> "CfgVehicles"] call compile preprocessFileLineNumbers "\userconfig\SQFCalculator\dumpConfig.sqf"},
    // Snippets
    {"Ikarus" call SQFCALC_findClassInConfig},
    {cursorTarget setObjectTexture [0, "tex\"]},
    {_car = "" createVehicleLocal (screenToWorld [.5,.5]); _car setObjectTexture [0, ""]; player reveal _car},
    {configFile >> "cfgVehicles" >> typeof cursorTarget >> "HitPoints"},
    {cursorTarget setHit [getText (configFile >> "cfgVehicles" >> typeof cursorTarget >> "HitPoints" >> "HitVRotor" >> "name"), 1]},
    {call compile preprocessFileLineNumbers ""}
];

// Helpers
SQFCALC_findClassInConfig = {
    private ["_classname", "_traverse", "_result"];
    _classname = _this;
    _result = [];
    _traverse = {
        private "_confName";
        if( isClass _this ) exitwith {
            if(configName _this == _classname) then {
                _result set [count _result, [str _this, _this]];
            };
            for "_i" from 0 to count _this - 1 do {
                _this select _i call _traverse
            };
        };
    };
    configFile call _traverse;
    _result;
};

SQFCALC_CursorTargetWatcher = {
    private ["_type", "_conf"];
    if( ! isNull cursorTarget ) then {
        _type = typeof cursorTarget;
        _conf = configFile >> "CfgVehicles" >> _type;
        SQFCALC_TargetCursorConf = _conf;
        format [
            "%1<br />class %2 : %3<br />%4<br />%5<br />%6",
            getText(_conf >> "displayName"),
            _type,
            configName inheritsFrom _conf,
            getText(_conf >> "model"),
            if( getNumber(_conf >> "isMan") == 1 ) then {
                name cursorTarget
            } else {
                getText(_conf >> "Library" >> "libTextDesc")
            },
            cursorTarget
        ];
    } else {
        "void";
    }
};

SQFCALC_GetCrewRoles = {
    private "_list";
    _list = [];
    {
        _list set [count _list, [
            rank _x,
            "Assign as " + (vehicle _x call {
                if (_x == assignedCommander _this) exitwith { "Commander" };
                if (_x == assignedDriver _this) exitwith { "Driver" };
                if (_x == assignedGunner _this) exitwith { "Gunner" };
                if (_x in assignedCargo _this) exitwith { "Cargo" };
                "unknown role"
            }),
            assignedVehicleRole _x
        ]]
    } foreach crew _this;
    _list;
};

SQFCALC_GetTurretsWeapons = {
    private ["_weapons",  "_result", "_getAnyMagazines", "_findRecurse"];
    _weapons = [];
    _result = [];
    _getAnyMagazines = {
        private ["_weapon", "_mags"];
        _weapon = configFile >> "CfgWeapons" >> _this;
        _mags = [];
        {
            _mags = _mags + getArray (
                ( if(_x == "this")then{ _weapon }else{ _weapon >> _x } ) >> "magazines"
            )
        } foreach getArray (_weapon >> "muzzles");
        _mags
    };
    _findRecurse = {
        for "_i" from 0 to count _this -1 do {
            (_this select _i) call {
                if( isClass _this ) then {
                    _weapons = _weapons + getArray ( _this >> "weapons" );
                    (_this >> "turrets") call {
                        if( isClass _this ) then _findRecurse;
                    };
                };
            };
        };
    };
    (
        configFile >> "CfgVehicles" >> (
            switch typeName _this do {
                case "STRING" : {_this};
                case "OBJECT" : {typeOf _this};
                default {nil}
            }
        ) >> "turrets"
    ) call _findRecurse;
    {
        _result set [count _result, [
            _x, _x call _getAnyMagazines
        ]];
    } foreach _weapons;
    _result;
};

SQFCALC_GetModelName = {
    _this = toArray _this;
    for "_i" from 0 to count _this - 1 do {
        if( _this select _i == 32 ) exitwith {
            _this set [_i, 62];
            str parseText ("< " + toString _this);
        };
    };
};

SQFCALC_FindAllDisplay = {
    private ["_displayList", "_display", "_ctrlList", "_ctrl", "_n", "_m"];
    _n = if(count _this > 0) then { _this select 0 };
    _m = if(count _this > 1) then { _this select 1 };
    _displayList = [];
    for "_i" from 0 to 1000 do {
        _display = findDisplay _i;
        if( ! isNull _display ) then {
            _ctrlList = [];
            _displayList set [count _displayList, [_display, _ctrlList]];
            for "_i" from 0 to 1000 do {
                _ctrl = _display displayCtrl _i;
                if( ! isNull _ctrl ) then {
                    _ctrlList set [count _ctrlList, _ctrl];
                };
            };
        };
    };
    _displayList;
};

SQFCALC_RC = {
    private ["_codestr", "_logic"];
    _codestr = "call " + str _this;
    _logic = "logic" createVehicleLocal [0,0];
    _logic setVehicleInit _codestr;
    processInitCommands;
    clearVehicleInit _logic;
    deleteVehicle _logic;
};

//
// The maximum time allowed for execution of the expression
// For example, the total time for output full game config may be 20 seconds and more.
// At the latest patches Armagh, well, sooo much time: ((
//

_maxTimeout = 120;

//
// Codes keyboard shortcuts, with clamped alt
//
//_HKInput = 2;
//_HKDisplay = 3;
//_HKDisplay2 = 4;
//_HKHistory = 0x23;
//_HKProcesses = 0x24
//_HKDemo = 0x20;
//_HKHelp = 0x3B;
//_HKLeft =
//_HKRight =
//

//
// Casual shortcut
//

cfg = configFile;
cfgA = configFile >> "CfgAmmo";
cfgM = configFile >> "CfgMagazines";
cfgW = configFile >> "CfgWeapons";
cfgV = configFile >> "CfgVehicles";
